
:doc:`EdgeFrame <index>`  assign_sample
***************************************

------


.. function:: assign_sample(self, sample_percentages, sample_labels=None, output_column=None, random_seed=None)

    Randomly group rows into user-defined classes.


    :Parameters:

        **sample_percentages** : list

        ..

            Entries are non-negative and sum to 1. (See the note below.)
            If the *i*'th entry of the  list is *p*,
            then then each row receives label *i* with independent probability *p*.



        **sample_labels** : list (default=None)

        ..

            Names to be used for the split classes.
            Defaults "TR", "TE", "VA" when the length of *sample_percentages* is 3,
            and defaults to Sample_0, Sample_1, ... otherwise.



        **output_column** : unicode (default=None)

        ..

            Name of the new column which holds the labels generated by the
            function.



        **random_seed** : int32 (default=None)

        ..

            Random seed used to generate the labels.
            Defaults to 0.




    :Returns:

        : dict

        ..


    Randomly assign classes to rows given a vector of percentages.
    The table receives an additional column that contains a random label.
    The random label is generated by a probability distribution function.
    The distribution function is specified by the sample_percentages, a list of
    floating point values, which add up to 1.
    The labels are non-negative integers drawn from the range
    :math:`[ 0, len(S) - 1]` where :math:`S` is the sample_percentages.
    Optionally, the user can specify a list of strings to be used as the labels.
    If the number of labels is 3, the labels will default to "TR", "TE" and "VA".

    Notes
    -----
    **Probability Validation**

    The sample percentages provided by the user are preserved to at least eight
    decimal places, but beyond this there may be small changes due to floating
    point imprecision.

    In particular:

    1)  The engine validates that the sum of probabilities sums to 1.0 within
        eight decimal places and returns an error if the sum falls outside of this
        range.
    2)  The probability of the final class is clamped so that each row receives a
        valid label with probability one.